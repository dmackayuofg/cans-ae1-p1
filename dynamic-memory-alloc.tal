(
    This program will implement the functions malloc() and free() as is seen in C.
    Created by Drew Mackay, 2652958M.
)

(
 Dynamic memory allocation using pages, a bitmap and an allocation map
)

( This is the suggested code skeleton for AE1
  it also provides helper functions for printing

  Replace `!todo` with your implementation for each function, 
  based on the Python reference

  "snippet" means a bit of code that you can use in your solution
)

(
  Rename this file to 
    dynamic-memory-alloc.tal
)

( zero page declarations should go into
    dynamic-memory-alloc-decls.tal
)

( definitions of malloc, free and functions used to implement them )
@malloc ( n_bytes* -- <allocation in bytes> )
    ( You are free to change this part but there should be no need )
    #00 .error STZ
    DUP2 ( n_bytes* n_bytes* )
    DUP2 ( n_bytes* n_bytes* n_bytes* )
    #0000 NEQ2 ,&cont1 JCN
        POP2 POP2
        #01 .error STZ
        #0000 JMP2r 
    &cont1 ( n_bytes* n_bytes* )
    #0001 SUB2 PAGE_SZ DIV2 #0001 ADD2 .n_pages STZ2 ( n_bytes* n_pages = ((n_bytes-1) // PAGE_SZ) + 1 )
    .n_pages LDZ2 N_PAGES GTH2 not ,&cont2 JCN ( n_pages>N_PAGES )
        POP2
        #07 .error STZ
        #0000 JMP2r 
    &cont2
    #0000 ;&idx STA2 ( n_bytes* ) ( idx=0 )

    !todo ( loop over idx )

    ( the following snippets are for error handling )
            
            ( snippet: error > 0 )
            .error LDZ #00 EQU ,&cont3 JCN
                #0000 JMP2r
            &cont3
            
            ( snippet: n_allocs == MAX_N_ALLOCS )
            ;n_allocs LDA2 DUP2 MAX_N_ALLOCS NEQ2 ,&cont4 JCN
                #05 .error STZ
                #0000 JMP2r
            &cont4

    ( snippet: allocated[ptr]=n_bytes )
        insert-ptr POP ( lazy, ignore return status )
JMP2r
&idx $2

@free ( ptr* -- )
    ( You are free to change this part but there should be no need )
    DUP2 ;&ptr STA2 ( ptr* )
    DMEM_START SUB2 PAGE_SZ DIV2 ( idx* = (ptr-DMEM_START) // PAGE_SZ )
    ( if idx<0 or idx>N_PAGES-1: error=2 )
    DUP2 DUP2 ( idx* idx* idx* )
    #0000 LTH2 ( idx* idx* idx<0 )
    ROT ROT ( idx* idx<0 idx* )
    N_PAGES #0001 SUB2 GTH2 ( idx* idx<0 idx>N_PAGES-1 )
    ORA not ,&cont JCN ( idx* )
        #02 .error STZ
        JMP2r
    &cont ( idx* )
    ( this corresponds to 
        if ptr in allocated
    )
    ;&ptr LDA2 lookup-ptr
    ( check if lookup-ptr returned 0000 
        if so, error=0 else error=6
    )
    DUP2 #0000 EQU2 ,&error6 JCN ( idx* n_bytes* )
    #00 .error STZ

    !todo

    ( snippet: )
    ( this corresponds to 
        del allocated[ptr]
    )
    ;&ptr LDA2 delete-ptr

    ( You are free to change this part but there should be no need )
    JMP2r
    &error6 
        #06 .error STZ 
    JMP2r
&ptr $2   

( allocation size is in pages )
( idx:16 alloc_sz:16 -- 00 or 01 )
@alloc_sz_is_free_at_idx ( idx* alloc_sz* -: b )

    ( python: for jj in range[alloc_sz]: )
    #0000 ( idx alloc_sz jj )
    &loop
        GTH2k ( idx alloc_sz jj 01/00 )
        not ,&done JCN ( break when loop done )
            
            ( python: if idx+jj>N_PAGES-1: )
            ( idx alloc_sz jj )
            ROT2 ( alloc_sz jj idx )
            ADD2k ( alloc_sz jj idx idx+jj )
            N_PAGES #0001 SUB2 ( alloc_sz jj idx idx+jj N_PAGES-1 )
            GTH2 ( alloc_sz jj idx 01/00 )

            ( may need to rework so that the if true is after the loop )
            not ,&if_1_false JCN

                ( error=4 )
                ( alloc_sz jj idx )
                &ret_0_error4
                    #04 .error STZ
                    POP2 POP2 POP2 #00 JMP2r ( 00 )
            
            ( alloc_sz jj idx )
            &if_1_false
            ADD2k ( alloc_sz jj idx idx+jj )
            get_bit ( alloc_sz jj idx bit )
            #01 EQU ( alloc_sz jj idx 00/01 )
            not ,&if_2_false JCN
                ( alloc_sz jj idx )
                POP2 POP2 POP2 #00 JMP2r ( 00 )
            
            ( alloc_sz jj idx )
            &if_2_false
            ROT2 ( jj idx alloc_sz )
            ROT2 ( idx alloc_sz jj )
            INC2 ( idx alloc_sz jj+1 )
            ,&loop JMP
    &done
    ( idx alloc_sz jj )
    POP2 POP2 POP2 #01 JMP2r
JMP2r

( allocation size is in pages )
@claim_alloc_sz_at_idx ( idx* alloc_sz* -: ) 
    
    ( python: for jj in range[alloc_sz]: )
    #0000 ( idx alloc_sz jj )
    &loop
        GTH2k ( idx alloc_sz jj 01/00 )
        not ,&done JCN ( break when loop done )

            ( python: set_bit[idx+jj] )
            ( idx alloc_sz jj )
            ROT2 ( alloc_sz jj idx )
            ADD2k ( alloc_sz jj idx idx+jj )
            set_bit ( alloc_sz jj idx )
            ROT2 ( jj idx alloc_sz )
            ROT2 ( idx alloc_sz jj )
            INC2 ( idx alloc_sz jj+1 )
            ,&loop JMP
    
    ( outside the loop )
    &done
    ( idx alloc_sz jj )
    POP2 POP2 POP2 ( )
JMP2r

( allocation size is in pages )
@free_alloc_sz_at_idx ( idx* alloc_sz* -: ) 

    ( python: for jj in range[alloc_sz]: )
    #0000 ( idx alloc_sz jj )
    &loop
        GTH2k ( idx alloc_sz jj 01/00 )
        not ,&done JCN ( break when loop done )

            ( python: clear_bit[idx+jj] )
            ( idx alloc_sz jj )
            ROT2 ( alloc_sz jj idx )
            ADD2k ( alloc_sz jj idx idx+jj )
            clear_bit ( alloc_sz jj idx )
            ROT2 ( jj idx alloc_sz )
            ROT2 ( idx alloc_sz jj )
            INC2 ( idx alloc_sz jj+1 )
            ,&loop JMP

    ( outside the loop )
    &done
    ( idx alloc_sz jj )
    POP2 POP2 POP2 ( )
JMP2r

@get_bit ( idx -- bit )

    ( python: byte_idx = idx >> 3 )
    DUP2 #03 SFT2 ( idx byte_idx )

    ( python: bit_idx = 7-idx-byte_idx<<3 )
    DUP2 #30 SFT2 ( idx byte_idx byte_idx<<3 )
    ROT2 ( byte_idx byte_idx<<3 idx )
    DUP2 ( byte_idx byte_idx<<3 idx idx )
    ROT2 ( byte_idx idx idx byte_idx<<3 )
    SUB2 ( byte_idx idx idx-byte_idx<<3 )
    #0007 ( byte_idx idx idx-byte_idx<<3 0007 )
    SWP2 ( byte_idx idx 0007 idx-byte_idx<<3 )
    SUB2 ( byte_idx idx bit_idx  )

    ( python: if byte_idx > N_PAGES-1: )
    ROT2 ( idx bit_idx byte_idx )
    DUP2 ( idx bit_idx byte_idx byte_idx )
    N_PAGES ( idx bit_idx byte_idx byte_idx N_PAGES )
    #0001 SUB2 ( idx bit_idx byte_idx byte_idx N_PAGES-1 )
    GTH2 not ,&cont JCN 
        ( python: error=4 )
        #04 .error STZ 
        JMP2r
    &cont ( idx bit_idx byte_idx )

    ( python: byte = bitmap[byte_idx] )
    ;bitmap ( idx bit_idx byte_idx bitmap_start_address )
    ADD2 ( idx bit_idx bitmap_byte_idx_offset_address )
    LDA ( idx bit_idx byte ; python: byte = bitmap[byte_idx] )

    ( python: bit = [byte >> bit_idx] & 0x01 )
    ROT POP ( idx bit_idx_1b byte )
    SWP ( idx byte bit_idx_1b )
    SFT ( idx byte>>bit_idx )
    #01 AND ( idx bit )

    ( python: return bit )
    ( stack cleaning )
    #00 ( idx_2b bit_1b 00 )
    NIP2 ( bit_1b 00 )
    POP  ( bit_1b )
JMP2r ( bit )

@set_bit ( idx -- )

    ( python: byte_idx = idx >> 3 )
    DUP2 #03 SFT2 ( idx byte_idx )

    ( bit_idx = 7 - idx + [byte_idx<<3] )
    DUP2 #30 SFT2 ( idx byte_idx byte_idx<<3 )
    ROT2 ( byte_idx byte_idx<<3 idx )
    DUP2 ( byte_idx byte_idx<<3 idx idx )
    #0007 ( byte_idx byte_idx<<3 idx idx 0007 )
    SWP2 ( byte_idx byte_idx<<3 idx 0007 idx )
    SUB2 ( byte_idx byte_idx<<3 idx 0007-idx )
    ROT2 ( byte_idx idx 0007-idx byte_idx<<3 )
    ADD2 ( byte_idx idx 0007-idx+byte_idx<<3=bit_idx )
    
    ( stack manip )
    ROT2 ( idx bit_idx byte_idx )

    ( python: byte = bitmap[byte_idx] )
    ;bitmap ( idx bit_idx byte_idx bitmap_start_address )
    ADD2 ( idx bit_idx bitmap_byte_idx_offset_address )
    LDA ( idx bit_idx byte ; python: byte = bitmap[byte_idx] )

    ( stack manip )
    #00 SWP ( idx bit_idx byte_2b )
    ROT2 ( bit_idx byte_2b idx )
    #03 SFT2 ( bit_idx byte_2b byte_idx )
    SWP2 ( bit_idx byte_idx byte_2b )
    ROT2 ( byte_idx byte_2b bit_idx )
    SWP2 NIP ( byte_idx bit_idx byte )
    ROT ROT ( byte_idx byte bit_idx )

    ( python: bitmap[byte_idx] = byte | mask_set[bit_idx] )
    mask_set ( byte_idx byte mask_set[bit_idx] )
    ORA ( byte_idx [byte|mask_set[bit_idx]] )
    ROT ROT ( [byte|mask_set[bit_idx]] byte_idx )
    ;bitmap ADD2 ( new_byte address )
    STA
JMP2r

@clear_bit ( idx -- )

    ( python: byte_idx = idx >> 3 )
    DUP2 #03 SFT2 ( idx byte_idx )

    ( python: bit_idx = 7 - idx + [byte_idx<<3] )
    DUP2 #30 SFT2 ( idx byte_idx byte_idx<<3 )
    ROT2 ( byte_idx byte_idx<<3 idx )
    DUP2 ( byte_idx byte_idx<<3 idx idx )
    #0007 ( byte_idx byte_idx<<3 idx idx 0007 )
    SWP2 ( byte_idx byte_idx<<3 idx 0007 idx )
    SUB2 ( byte_idx byte_idx<<3 idx 0007-idx )
    ROT2 ( byte_idx idx 0007-idx byte_idx<<3 )
    ADD2 ( byte_idx idx 0007-idx+byte_idx<<3=bit_idx )

    ( stack manip )
    ROT2 ( idx bit_idx byte_idx )

    ( python: byte = bitmap[byte_idx] )
    ;bitmap ( idx bit_idx byte_idx bitmap_start_address )
    ADD2 ( idx bit_idx bitmap_byte_idx_offset_address )
    LDA ( idx bit_idx byte )

    ( stack manip )
    #00 SWP ( idx bit_idx byte_2b )
    ROT2 ( bit_idx byte_2b idx )
    #03 SFT2 ( bit_idx byte_2b byte_idx )
    SWP2 ( bit_idx byte_idx byte_2b )
    ROT2 ( byte_idx byte_2b bit_idx )
    SWP2 NIP ( byte_idx bit_idx byte )
    ROT ROT ( byte_idx byte bit_idx )

    ( python: bitmap[byte_idx] = byte & mask_clear[bit_idx] )
    mask_clear ( byte_idx byte mask_clear[bit_idx] )
    AND ( byte_idx [byte&mask_clear[bit_idx]] )
    ROT ROT ( [byte&mask_clear[bit_idx]] byte_idx )
    ;bitmap ADD2 ( new_byte address )
    STA
JMP2r

@mask_clear ( bit_idx* -: mask )
.bit_idx STZ2 #ff [ #01 .bit_idx LDZ2 NIP #40 SFT SFT ] EOR
JMP2r

@mask_set ( bit_idx* -: mask )
.bit_idx STZ2
#01 .bit_idx LDZ2 NIP #40 SFT SFT
JMP2r

( ==================================================== )
( Functions for handling the allocation dictionary )
( Also contains the map of allocated pointers and their sizes )
~allocation-map.tal
( ==================================================== )
( Functions for printing )
~fmt-print.tal
~print-extra.tal
( ==================================================== )
( This resets memory, allocated and n_allocs for test purposes )
@reset
    #00 .error STZ
    #0000 ;n_allocs STA2
    clear-bitmap
    clear-allocation
    clear-vmem

@clear-bitmap
#0000 ,&idx STR2
&loop
,&idx LDR2 N_PAGES #03 SFT2 EQU2 ,&done JCN
#00 ,&idx LDR2 ;bitmap ADD2 STA
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2

@clear-vmem
#0000 ,&idx STR2
&loop
,&idx LDR2 MAX_ALLOC_SZ EQU2 ,&done JCN
#00 ,&idx LDR2 ;vmem ADD2 STA
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2
( ==================================================== )
( For debugging )
@print-bitmap
#0000 ,&idx STR2
&loop
,&idx LDR2 #0040 EQU2 ,&done JCN
,&idx LDR2 ;bitmap ADD2 LDA print8-dec ws
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2

@print-allocated
#0000 ,&idx STR2
&loop
,&idx LDR2 #0080 EQU2 ,&done JCN
,&idx LDR2 ;allocated ADD2 LDA2 print16-dec ws
,&idx LDR2 ;allocated ADD2 #0002 ADD2 LDA2 print16-dec ws
,&idx LDR2 #0004 ADD2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2
( ==================================================== )
( b :- not_b )
@not #01 SWP SUB JMP2r
( ==================================================== )
( Functions for error handling )

@report-error ( erc -- )
    #00 SWP #0002 MUL2 ;errors ADD2 LDA2 JSR2
    JMP2r

@get-error
    .error LDZ
    JMP2r

( error strings )
@errors =no-error =null-ptr =invalid-ptr =invalid-access =outside-page =max-alloc =ptr-not-alloc =alloc-too-large
( errors )
( 0 )
@no-error JMP2r
( 1 )
@null-ptr { 000c "Null 20 "pointer } STH2r !print-str
( 2 )
@invalid-ptr { 000f "Invalid 20 "pointer } STH2r !print-str
( 3 )
@invalid-access { 000f "Invalid 20 "access: } STH2r !print-str
( 4 )
@outside-page { 0016 "Outside 20 "of 20 "page 20 "range: } STH2r !print-str
( 5 )
@max-alloc { 0021 "Max 20 "number 20 "of 20 "allocations 20 "reached } STH2r !print-str
( 6 )
@ptr-not-alloc { 0019 "Pointer 20 "was 20 "not 20 "allocated } STH2r !print-str
( 7 )
@alloc-too-large { 0014 "Allocation 20 "too 20 "large  } STH2r !print-str

( END of functions for error handling )
( ==================================================== )

( Constants )
@PAGE_SZ ( -: a* ) #0010 JMP2r ( We allocate 16 bytes per page )
@N_PAGES ( -: a* ) #0100 JMP2r ( We have a total of 256 pages, so we can allocate at most 4kB )
@DMEM_START ( -: a* ) #f000 JMP2r ( Start at 60*1024 )
@MAX_N_ALLOCS ( -: a* ) #0020 JMP2r ( We can allocate at most 32 regions )
@MAX_ALLOC_SZ ( -: a* )  
PAGE_SZ N_PAGES MUL2
JMP2r
( Counter to track number of allocations )
( The allocation map is in allocation-map.tal )
@n_allocs 0000

 ( N_PAGES bits, packed in bytes mean N_PAGES/8 entries, so with the above, the bitmap will take 32 bytes )
 ( 0 means free )
@bitmap $20

( The allocation happens below this )
|f000
@vmem